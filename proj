#######################################################chatbot
 
#5th pratical chatbot
import random
 
# Function to greet the user
def greet():
    greetings = ["Hello!", "Hi!", "Hey there!", "Greetings!"]
    return random.choice(greetings)
 
# Function to generate a response
def generate_response(user_input):
    responses = {
        "hello": "Hello there!",
        "how are you?": "I'm doing well, thank you!",
        "what's your name?": "You can call me ChatBot.",
        "default": "I'm sorry, I am not getting"
    }
    return responses.get(user_input.lower(), responses["default"])
 
# Main function for running the chatbot
def run_chatbot():
    print(greet())
    print("I'm a chatbot. How can I assist you today?")
 
    while True:
        user_input = input("User: ")
        response = generate_response(user_input)
        print("ChatBot:", response)
 
        if user_input.lower() == "bye":
            print("ChatBot: Goodbye! Have a great day!")
            break
 
# Run the chatbot
run_chatbot()
 
 
##############################################################queen problem
#4th pratical queen
def is_safe(board, row, col, N):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 1:
            return False
 
    # Check if there is a queen in the upper-left diagonal
    i = row
    j = col
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1
 
    # Check if there is a queen in the upper-right diagonal
    i = row
    j = col
    while i >= 0 and j < N:
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1
 
    return True
 
 
def solve_n_queens_util(board, row, N, solutions):
    if row == N:
        # If all queens are placed, add the solution to the list
        solution = []
        for i in range(N):
            row_str = ""
            for j in range(N):
                if board[i][j] == 1:
                    row_str += "Q"
                else:
                    row_str += "."
            solution.append(row_str)
        solutions.append(solution)
    else:
        for col in range(N):
            if is_safe(board, row, col, N):
                # Place the queen and recursively check for the next row
                board[row][col] = 1
                solve_n_queens_util(board, row + 1, N, solutions)
                # Backtrack and remove the queen
                board[row][col] = 0
 
 
def solve_n_queens(N):
    board = [[0] * N for _ in range(N)]
    solutions = []
    solve_n_queens_util(board, 0, N, solutions)
    return solutions
 
 
# Example usage
n = 4
solutions = solve_n_queens(n)
print(f"Number of solutions for {n}-queens problem: {len(solutions)}")
for i, solution in enumerate(solutions):
    print(f"Solution {i+1}:")
    for row in solution:
        print(row)
    print()
 
###################################################################################selection sort
# 3rd pratical selection sort
def selectionSort(arr):
    for i in range(len(arr)):
       # min = float('-inf')
        for j in range(i + 1, len(arr)):
            if arr[i] > arr[j]:
                arr[i],arr[j] = arr[j], arr[i]
    return arr
 
 
arr = []
n = int(input("Enter the list size "))
 
print("\n")
for i in range(0, n):
    print("Enter number at index", i, )
    item = int(input())
    arr.append(item)
print("User list is ", arr)
print("sorted list is ",selectionSort(arr))
 
######################################################################A*
def print_list(start):
    for i in range(9):
        if i%3 ==0:
            print()
        if start[i] == -1:
            print("_",end=" ")
        else:
            print(start[i],end=" ")
    print()
 
def solve(start):
    inv = 0
    for i in range(9):
        if start[i]<=1:
            continue
        for j in range(1+i,9):
            if start[j] == -1:
                continue
            if start[i]>start[j]:
                inv += 1
    if inv%2 == 0:
        return True
    return False
 
def moveright(start,pos):
    start[pos],start[pos+1] = start[pos+1],start[pos]
def moveleft(start,pos):
    start[pos],start[pos-1] = start[pos-1],start[pos]
def moveup(start,pos):
    start[pos],start[pos-3] = start[pos-3],start[pos]
def movedown(start,pos):
    start[pos],start[pos+3] = start[pos+3],start[pos]
 
 
 
# def heuristic(start,goal):
#     h=0
#     global g
#     for i in range(9):
#         for j in range(9):
#             if start[i]==goal[j] and start[i]!= -1:
#                 h += (abs(j-i))//3+(abs(j-i))%3
#     return h+g
 
def heuristic(start,goal):
    global g
#     print('heuristic g : -----',g)
    h = 0
    for i in range(9):
        for j in range(9):
            if start[i] == goal[j] and start[i] != -1:
                h += (abs(j-i))//3 + (abs(j-i))%3
#                 print('i and j',i,j)
#                 print('h inside if : ',h)
#             print('h out of if:',h)
#      print('return h+g',h+g)
    return h + g
 
def movetile(start,goal):
    emp = start.index(-1)
    row = emp//3
    col = emp%3
    t1,t2,t3,t4 = start[:],start[:],start[:],start[:]
    f1,f2,f3,f4 =100,100,100,100
 
    if col-1 >=0:
#         print('------left--------')
        moveleft(t1,emp)
        f1 = heuristic(t1,goal)
    if col+1 < 3:
#         print('------right--------')
        moveright(t2,emp)
        f2 = heuristic(t2,goal)
    if row+1 <3:
#         print('------down--------')
        movedown(t3,emp)
        f3 = heuristic(t3,goal)
    if row-1 >=0:
#         print('------up--------')
        moveup(t4,emp)
        f4 = heuristic(t4,goal)
 
 
    min_f = min(f1,f2,f3,f4)
#     print('heuristic :- ',min_f)
 
    if f1 ==min_f:
        print('------left--------')
        moveleft(start,emp)
    elif f2 == min_f:
        print('------right--------')
        moveright(start,emp)
    elif f3 == min_f:
        print('------down--------')
        movedown(start,emp)
    elif f4 == min_f:
        print('------up--------')
        moveup(start,emp)
 
def solveEigth(start,goal):
    global g
#     print('g = ',g)
    g += 1
    print()
    print('move = ',g)
    movetile(start,goal)
    print_list(start)
    print()
    f= heuristic(start,goal)
    if f == g:
        print('solve in {} moves '.format(g))
        return
 
    solveEigth(start,goal)
 
 
def main():
    global g
    g=0
#     print('main g : -----',g)
    start = list()
    goal = list()
    print('Enter start node :(-1 for empty tile): ')
    for i in range(9):
        start.append(int(input()))
 
    print('Enter goal node :')
    for i in range(9):
        goal.append(int(input()))
 
 
    print_list(start)
 
    if solve(start):
        solveEigth(start,goal)
        print('solve in {} moves '.format(g))
    else:
        print("cant solve ")
 
if __name__ == '__main__':
    main()
